import java.util.*;

public class ECommerceApp {
    public static void main(String[] args) {
        System.out.println("==== Test Case 1: Normal checkout ====");
        Product cheese = new ExpirableShippableProduct("Cheese", 100, 5, false, 0.4);
        Product biscuits = new ExpirableProduct("Biscuits", 150, 2, false);
        Product tv = new ShippableProduct("TV", 300, 4, 0.7);
        Product scratchCard = new Product("Scratch Card", 50, 10) {};

        Customer john = new Customer("John", 500);
        Cart cart1 = new Cart();
        cart1.add(cheese, 2);
        cart1.add(biscuits, 1);
        cart1.add(scratchCard, 1);
        Checkout.process(john, cart1);
        System.out.println();

        System.out.println("==== Test Case 2: Exceeded quantity ====");
        Customer sara = new Customer("Sara", 1000);
        Cart cart2 = new Cart();
        cart2.add(tv, 10);  // Only 4 in stock
        Checkout.process(sara, cart2);
        System.out.println();

        System.out.println("==== Test Case 3: Expired product ====");
        Product expiredMilk = new ExpirableShippableProduct("Milk", 70, 3, true, 0.5);
        Customer ali = new Customer("Ali", 200);
        Cart cart3 = new Cart();
        cart3.add(expiredMilk, 1);
        Checkout.process(ali, cart3);
        System.out.println();

        System.out.println("==== Test Case 4: Insufficient balance ====");
        Product fancyTV = new ShippableProduct("Fancy TV", 700, 2, 1.2);
        Customer poorGuy = new Customer("Omar", 100);  // Too broke for this
        Cart cart4 = new Cart();
        cart4.add(fancyTV, 1);
        Checkout.process(poorGuy, cart4);
        System.out.println();

        System.out.println("==== Test Case 5: Empty cart ====");
        Customer noItemsGuy = new Customer("Ziad", 300);
        Cart cart5 = new Cart();
        Checkout.process(noItemsGuy, cart5);
        System.out.println();
    }
}

interface Shippable {
    String getName();
    double getWeight();
}

abstract class Product {
    protected String name;
    protected double price;
    protected int quantity;

    public Product(String name, double price, int quantity) {
        this.name = name;
        this.price = price;
        this.quantity = quantity;
    }

    public boolean isExpired() {
        return false;
    }

    public boolean isShippable() {
        return false;
    }

    public double getWeight() {
        return 0;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    public int getQuantity() {
        return quantity;
    }

    public void reduceQuantity(int amount) {
        quantity -= amount;
    }
}

class ExpirableProduct extends Product {
    private boolean expired;

    public ExpirableProduct(String name, double price, int quantity, boolean expired) {
        super(name, price, quantity);
        this.expired = expired;
    }

    @Override
    public boolean isExpired() {
        return expired;
    }
}

class ShippableProduct extends Product implements Shippable {
    private double weight;

    public ShippableProduct(String name, double price, int quantity, double weight) {
        super(name, price, quantity);
        this.weight = weight;
    }

    @Override
    public boolean isShippable() {
        return true;
    }

    @Override
    public double getWeight() {
        return weight;
    }
}

class ExpirableShippableProduct extends ExpirableProduct implements Shippable {
    private double weight;

    public ExpirableShippableProduct(String name, double price, int quantity, boolean expired, double weight) {
        super(name, price, quantity, expired);
        this.weight = weight;
    }

    @Override
    public boolean isShippable() {
        return true;
    }

    @Override
    public double getWeight() {
        return weight;
    }
}

class CartItem {
    Product product;
    int quantity;

    public CartItem(Product product, int quantity) {
        this.product = product;
        this.quantity = quantity;
    }

    public double getTotalPrice() {
        return product.getPrice() * quantity;
    }
}

class Cart {
    private List<CartItem> items = new ArrayList<>();

    public void add(Product product, int quantity) {
        if (quantity <= 0 || quantity > product.getQuantity()) {
            System.out.println("Can't add " + quantity + " of " + product.getName() + " to the cart. Chill.");
            return;
        }
        items.add(new CartItem(product, quantity));
    }

    public List<CartItem> getItems() {
        return items;
    }

    public boolean isEmpty() {
        return items.isEmpty();
    }

    public double getSubtotal() {
        double total = 0;
        for (CartItem item : items) {
            total += item.getTotalPrice();
        }
        return total;
    }

    public List<Shippable> getShippableItems() {
        List<Shippable> shippables = new ArrayList<>();
        for (CartItem item : items) {
            if (item.product.isShippable()) {
                for (int i = 0; i < item.quantity; i++) {
                    shippables.add((Shippable) item.product);
                }
            }
        }
        return shippables;
    }
}

class Customer {
    private String name;
    private double balance;

    public Customer(String name, double balance) {
        this.name = name;
        this.balance = balance;
    }

    public boolean canAfford(double amount) {
        return balance >= amount;
    }

    public void pay(double amount) {
        balance -= amount;
    }

    public double getBalance() {
        return balance;
    }
}

class ShippingService {
    public static void ship(List<Shippable> items) {
        if (items.isEmpty()) return;
        System.out.println("** Shipment notice **");
        double totalWeight = 0;

        Map<String, Integer> counts = new HashMap<>();
        Map<String, Double> weights = new HashMap<>();

        for (Shippable item : items) {
            String name = item.getName();
            counts.put(name, counts.getOrDefault(name, 0) + 1);
            weights.put(name, item.getWeight());
            totalWeight += item.getWeight();
        }

        for (String name : counts.keySet()) {
            System.out.println(counts.get(name) + "x " + name);
            System.out.println((int)(weights.get(name) * 1000) + "g");
        }

        System.out.printf("Total package weight %.1fkg\n", totalWeight);
    }
}

class Checkout {
    public static void process(Customer customer, Cart cart) {
        if (cart.isEmpty()) {
            System.out.println("Error: Cart is empty. Maybe buy something?");
            return;
        }

        for (CartItem item : cart.getItems()) {
            if (item.product.isExpired()) {
                System.out.println("Error: " + item.product.getName() + " is expired. Yikes!");
                return;
            }
            if (item.quantity > item.product.getQuantity()) {
                System.out.println("Error: Not enough " + item.product.getName() + " in stock.");
                return;
            }
        }

        double subtotal = cart.getSubtotal();
        double shipping = cart.getShippableItems().isEmpty() ? 0 : 30;
        double total = subtotal + shipping;

        if (!customer.canAfford(total)) {
            System.out.println("Error: Not enough money, buddy.");
            return;
        }

        for (CartItem item : cart.getItems()) {
            item.product.reduceQuantity(item.quantity);
        }

        customer.pay(total);
        ShippingService.ship(cart.getShippableItems());

        System.out.println("** Checkout receipt **");
        for (CartItem item : cart.getItems()) {
            System.out.println(item.quantity + "x " + item.product.getName());
            System.out.println((int)(item.product.getPrice()));
        }
        System.out.println("----------------------");
        System.out.println("Subtotal");
        System.out.println((int)subtotal);
        System.out.println("Shipping");
        System.out.println((int)shipping);
        System.out.println("Amount");
        System.out.println((int)total);
        System.out.println("END.");
    }
}
